generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tokens {
  id           Int      @id @default(autoincrement())
  user         Users    @relation(fields: [userId], references: [id])
  userId       Int
  // access_token    String    @db.VarChar(255)
  refreshToken String   @db.VarChar(255)
  status       Boolean  @default(true)
  createTime   DateTime @default(now())
}

model UserAuth {
  id         Int      @id @default(autoincrement())
  user       Users     @relation(fields: [userId], references: [id])
  userId     Int
  login      String   @db.VarChar(255)
  password   String   @db.VarChar(255)
  createTime DateTime @default(now())
}

model Projects {
  id             Int      @id @default(autoincrement())
  title          String   @db.VarChar(255)
  creation_date_ DateTime @map("creation_date ") @db.Time(6)
  creator        Int
  users          Users    @relation(fields: [creator], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tread          Tread[]

  @@map("projects ")
}

model Reports {
  id                         Int    @id(map: "Reports_pkey") @default(autoincrement())
  tread                      Int
  url                        String @db.VarChar(511)
  tread_reports_treadTotread Tread  @relation("reports_treadTotread", fields: [tread], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Reports_tread_fkey")
}

model Tread {
  id                           Int       @id(map: "Tread_pkey") @default(autoincrement())
  parent                       Int?
  creator                      Int
  comment                      String    @db.VarChar(255)
  project                      Int       @default(0)
  state                        Int       @default(1)
  tag                          String?   @db.VarChar(255)
  executor                     String?   @db.VarChar(255)
  Title                        String?   @db.VarChar(255)
  reports_reports_treadTotread Reports[] @relation("reports_treadTotread")
  users_tread_creatorTousers   Users     @relation("tread_creatorTousers", fields: [creator], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Tread_creator_fkey")
  projects_                    Projects @relation(fields: [project], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Tread_project_fkey")
  users_tread_executorTousers  Users?    @relation("tread_executorTousers", fields: [executor], references: [link], onDelete: NoAction, onUpdate: NoAction)
}

model Users {
  id                          Int         @id @default(autoincrement())
  link                        String      @db.VarChar(255)
  projects_                   Projects[]
  tread_tread_creatorTousers  Tread[]     @relation("tread_creatorTousers")
  tread_tread_executorTousers Tread[]     @relation("tread_executorTousers")


  UserAuthes UserAuth[]
  Tokens     Tokens[]
  @@unique([link], map: "users_link_link1_key")
}

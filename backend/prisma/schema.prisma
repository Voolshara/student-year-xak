generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tokens {
  id           Int      @id @default(autoincrement())
  user         Users    @relation(fields: [userId], references: [id])
  userId       Int
  // access_token    String    @db.VarChar(255)
  refreshToken String   @db.VarChar(255)
  status       Boolean  @default(true)
  createTime   DateTime @default(now())
}

model UserAuth {
  id         Int      @id @default(autoincrement())
  user       Users    @relation(fields: [userId], references: [id])
  userId     Int
  login      String   @db.VarChar(255)
  password   String   @db.VarChar(255)
  createTime DateTime @default(now())
}

model Reports {
  id     Int    @id @default(autoincrement())
  thred  Thread @relation(fields: [tredId], references: [id])
  tredId Int
  url    String @db.VarChar(511)
}

model Thread {
  id Int @id @default(autoincrement())
  creation_date DateTime @default(now())


  solver   Users? @relation(fields: [solverId], references: [id], name: "executingThreds")
  solverId Int?

  creator   Users @relation(fields: [creatorId], references: [id])
  creatorId Int

  title   String? @db.VarChar(255)
  comment String  @db.VarChar(255)

  state Int      @default(1)
  tag   String[] @db.VarChar(255)

  childThreads Thread[] @relation(name: "tree")

  parent   Thread? @relation(fields: [parentId], references: [id], name: "tree")
  parentId Int?

  reports Reports[]
}

model Users {
  id       Int        @id @default(autoincrement())
  link     String     @db.VarChar(255)

  createdThreds   Thread[]
  executingThreds Thread[] @relation(name: "executingThreds")

  UserAuthes UserAuth[]
  Tokens     Tokens[]
}
